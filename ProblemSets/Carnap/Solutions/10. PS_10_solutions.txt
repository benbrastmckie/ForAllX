Solutions for JTapp ones are in Latex, or printed.

1+1+14+1+14+13+14+20+6+16 = 100. (not sure if I want to grade all these). Also a worry that this PSet is too long. Could replace some problems with some "catch an error" style problems that JTapp has from Logic BOok. But would need to code these up. [Really does take a massive amount of time to make a pSet like this and check the problems; like at least 10poms; have already done 6 today and already had a solid draft] 

Solutions below for the five Zach ones I solved for fun:

Existential Elimination problem from Zach; his 7.2 (involves an assumption for >I as well). Note that I probably shouldn't use A as a predicate since too close to the universal quantifier:

Rewritten to not use A as a predicate:

(∃x)(Fx ⊃ B) :PR
    Aa > B :AS for EE
        (Ax) Fx :AS for >I
        Fa :3 AE
        B :2, 4 >E
    (Ax)Fx>B :3-5 >I
(Ax)Fx>B :1, 2-6 EE  

Old solution, with A as a predicate: 
(∃x)(Ax ⊃ B) :PR
    Aa > B :AS for EE
        (Ax) Ax :AS for >I
        Aa :3 AE
        B :2, 4 >E
    (Ax)Ax>B :3-5 >I
(Ax)Ax>B :1, 2-6 EE  


Universal Elimination, disjunction elimination, existential elimination problem 7.1. Note that this one is longest one yet (19 lines), but conceptually very clear. 

Trick is to start the EE right away, since you need to choose a specific constant you will work with, the constant that is not a C. Then you instantiate the universals for THIS constant, so that you can generate the right contradiction when you need it, and not fall foul of the rules for EE. (A little tricky to get the indents/scope lines to work out, so need to count tabs. And the -- needs to be tabbed in, since the vE is occuring at second level, so the -- needs to be tabbed in once. 

Thing to emphasize about EE: the Q in the rule can be anything that lacks the dummy constant! So you start the rule by instantiating, but need to derive what you want, such that Q doesn't have the dummy constant. In this case we want (Ez) Bz, so we're going to need to get that. and we have a disjunction, so will need proof by cases. 

This problem really exercises you on a lot of the syntax. need to be VERY precise! 

(∀y)(Ay ∨ By) :PR
(∀x)(Ax ⊃ Cx) :PR
(∃x)~Cx :PR
    ~Ca :AS for EE
    Aa v Ba :1 AE
    Aa > Ca :2 AE
        Ba :AS for vE
        Ba :7 R
        (Ez) Bz :8 EI
    --
        Aa :AS for vE
        Ca :6,11 >E
            ~Ba :AS for ~E
            Ca :12 R
            ~Ca :4 R
        Ba :13-15 ~E
        (Ez) Bz :16 EI
    (Ez) Bz :5, 7-9, 11-17 vE
(Ez) Bz :3, 4-18 EE      

Note that waiting too long for the EE on ~Cx might doom the problem, since then when you existental eliminate, you seem to violate a rule b/c the free variable will occur in an assumption already.:

(∀y)(Ay ∨ By) :PR
(∀x)(Ax ⊃ Cx) :PR
(∃x)~Cx :PR
Aa v Ba :1 AE
Aa > Ca :2 AE
    Ba :AS for vE
    Ba :6 R
    (Ez) Bz :7 EI
--
    Aa :AS for vE
    Ca :5,10 >E
        ~Ba :AS for ~E






zach PSL7.3, my PS10.8:

NOte to self, it is tricky to figure out how to structure the following such that you can use the Qa and ~Qa contradiction to get what you want. Here's where I naturally went and got stuck: 

(∀x)(Px ⊃ ~Qx) :PR
Pa > ~Qa :1 AE
    (Ex) (Px &Qx) :AS for ~I
        Pa & Qa :AS for EE
        Pa :4 &E
        Qa :4 &E
        ~Qa :2, 5 >E

Following did not seem to make things better: 

(∀x)(Px ⊃ ~Qx) :PR
Pa > ~Qa :1 AE
    (Ex) (Px &Qx) :AS for ~I
        Pa & Qa :AS for EE
            (Pa & Qa) :AS for ~I
            Pa :4 &E
            Qa :4 &E
            ~Qa :2, 6 >E
        ~(Pa&Qa) :5-8 ~I

FIGURED IT OUT!!! the trick is to reassume (Ex) (Px &Qx), since then you'll construct  ~(Ex) (Px &Qx), and can reiterate (Ex) (Px &Qx) for the first negation elimination. This is a tough one, so maybe leave on the checker for this! but make exam mode since they might not get it. 

(∀x)(Px ⊃ ~Qx) :PR
Pa > ~Qa :1 AE
    (Ex) (Px &Qx) :AS for ~I
        Pa & Qa :AS for EE
            (Ex) (Px &Qx) :AS for ~I
            Pa :4 &E
            Qa :4 &E
            ~Qa :2, 6 >E
        ~(Ex) (Px &Qx) :5-8 ~I
    ~(Ex) (Px &Qx) :3, 4-9 EE
    (Ex) (Px &Qx) :3 R
~(Ex) (Px &Qx) :3-11 ~I


11-15-22: redid my solution fresh. Note that for ~I and ~E rules, Carnap seems to REQUIRE that the two instances of \Psi and ~\Psi appear adjacent to each other; need to fix this in Carnap!: 

(∀x)(Px ⊃ ~Qx) :PR
    (∃x)(Px & Qx) :A/ for ~I
        Pa & Qa :A/ for EE
            (∃x)(Px & Qx) :A/ for ~I
            Pa :3 &E
            Qa :3&E
            Pa > ~Qa :1 AE
            ~Qa :5, 7 >E
            Qa :6 R
        ~(∃x)(Px & Qx) :4-9 ~I
    ~(∃x)(Px & Qx) :2, 3-10 EE
    (∃x)(Px & Qx) :2 R
~(∃x)(Px & Qx) :2-12 ~I      



Doing the other direction! Figuring out how to start this one really stumped me, since you can't Exist Instantiate, and trying indirect proof would get you no where, since you again couldn't instantiate antying. The trick is to think about what you need to build, and just start building it, from the inside-out. 

~(∃x)(Px & Qx) :PR
    Pa :AS for >I
        Qa :AS for ~I
        Pa & Qa :2,3 &I
        (Ex)(Px&Qx) :4 EI
        ~(∃x)(Px & Qx) :1 R
    ~Qa :3-6 ~I
Pa > ~Qa :2-7 >I
(Ax) (Px > ~Qx) :8 AI


11-15-22: redid my solN from scratch:

~(∃x)(Px & Qx) :PR
    Pa :A/ for >I
        Qa :A/ for ~I
        Pa & Qa :2, 3 &I
        (Ex)(Px & Qx) :4 EI
        ~(∃x)(Px & Qx) :1 R
    ~Qa :3-6 ~I
Pa>~Qa :2-7 >I
(Ax)(Px > ~Qx) :8 AI

zach PSL7.5, my PS10.10: 
One direction of De MOrgan for quantifer COnversion (trick is to instantiate the existential right away, so that you can appeal to that instance to generate a contradiction)

    (Ex) Bx :AS for >I, note that you must tab here for scope lines ! 
        Ba :AS for EE
            (Ax)~Bx :AS for ~I
            ~Ba :3 AE
            Ba :2 R
        ~(Ax)~Bx :3-5 ~I
    ~(Ax)~Bx :1, 2-6 EE
(Ex) Bx > ~(Ax)~Bx :1-7 >I      


Redoing my solution fresh:

    (∃x)Bx :A/ for >I
        Ba :A/ for EE
            (∀x)~Bx :A/ for ~I
            ~Ba :3 AE
            Ba :2 R
        ~(Ax)~Bx :3-5 ~I
    ~(Ax)~Bx :1, 2-6 EE     
((∃x)Bx ⊃ ~(∀x)~Bx) :1-7 >I  

note that the following step is ILLEGAL application of AInstantiation: (go over this in class!):
    (∃x)Bx :A/ for >I
        Ba :A/ for EE
        (Ax)Bx :2 AI    ILLEGAL!  


The other direction seems pretty tough and it was not clear to me how to do it...:
(~(∀x)~Bx ⊃ (∃x)Bx). 
Allegedly need an indirect proof but not clear to me how to build up a contradiction from a negated universal and a negated existential. I guess I could then assume Ba for ~I as well, build up to (Ex)Bx to get a contradiction? 
Then I would have ~Ba and could build up (∀x)~Bx, and use that to contradict starting point! 

And this totally worked!!!! Rationale: you know you need to use indirect proof, and the only thing that could be the ultimate contradiction is the negation of your starting assumption. so you have to build that up. i.e. need to build up (Ax)~Bx

    ~(∀x)~Bx :AS for >I
        ~(Ex)Bx :AS for ~E
            Ba :AS for ~I
            (Ex)Bx :3 EI
            ~(Ex)Bx :2 R
        ~Ba :3-5 ~I
        (Ax)~Bx :6 AI
        ~(∀x)~Bx :1 R
    (Ex)Bx :2-8 ~E
~(∀x)~Bx ⊃ (∃x)Bx :1-9 >I   

